<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="90" failures="2" errors="0" time="7.465">
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:30:57" time="3.267" tests="4">
    <testcase classname="list .thenBy() returns a new OrderedList" name="list .thenBy() returns a new OrderedList" time="0.022">
    </testcase>
    <testcase classname="list .thenBy() sorts by an additional field when invoked after .orderBy()" name="list .thenBy() sorts by an additional field when invoked after .orderBy()" time="0.002">
    </testcase>
    <testcase classname="list .thenBy() creates and sorts a new array without modifying the source array" name="list .thenBy() creates and sorts a new array without modifying the source array" time="0.003">
    </testcase>
    <testcase classname="list .thenBy() places null values before strings" name="list .thenBy() places null values before strings" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:30:57" time="3.404" tests="6">
    <testcase classname="list .orderByDescending() creates and returns a new jinq instance" name="list .orderByDescending() creates and returns a new jinq instance" time="0.015">
    </testcase>
    <testcase classname="list .orderByDescending() sorts the underlying array in descending order" name="list .orderByDescending() sorts the underlying array in descending order" time="0.002">
    </testcase>
    <testcase classname="list .orderByDescending() doesn&apos;t modify the order of the source array" name="list .orderByDescending() doesn&apos;t modify the order of the source array" time="0.002">
    </testcase>
    <testcase classname="list .orderByDescending() handles an empty array" name="list .orderByDescending() handles an empty array" time="0.001">
    </testcase>
    <testcase classname="list .orderByDescending() places nulls after numbers" name="list .orderByDescending() places nulls after numbers" time="0.003">
    </testcase>
    <testcase classname="list .orderByDescending() places nulls after strings" name="list .orderByDescending() places nulls after strings" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:00" time="0.312" tests="5">
    <testcase classname="list .toDictionary() converts a list to a dictionary" name="list .toDictionary() converts a list to a dictionary" time="0.004">
    </testcase>
    <testcase classname="list .toDictionary() converts a list to a dictionary with value projection" name="list .toDictionary() converts a list to a dictionary with value projection" time="0.002">
    </testcase>
    <testcase classname="list .toDictionary() throws an exception if lambdaKey is not specified" name="list .toDictionary() throws an exception if lambdaKey is not specified" time="0.002">
    </testcase>
    <testcase classname="list .toDictionary() throws an exception if lambdaValue is not specified" name="list .toDictionary() throws an exception if lambdaValue is not specified" time="0.002">
    </testcase>
    <testcase classname="list .toDictionary() throws an exception if a duplicate key is detected" name="list .toDictionary() throws an exception if a duplicate key is detected" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="isNumeric" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:00" time="0.364" tests="15">
    <testcase classname="isNumeric returns true for positive numbers" name="isNumeric returns true for positive numbers" time="0.008">
    </testcase>
    <testcase classname="isNumeric returns true for negative numbers" name="isNumeric returns true for negative numbers" time="0.003">
    </testcase>
    <testcase classname="isNumeric returns true for decimal numbers" name="isNumeric returns true for decimal numbers" time="0.002">
    </testcase>
    <testcase classname="isNumeric returns true for zero" name="isNumeric returns true for zero" time="0.001">
    </testcase>
    <testcase classname="isNumeric returns true for bigint" name="isNumeric returns true for bigint" time="0.003">
    </testcase>
    <testcase classname="isNumeric returns false for NaN" name="isNumeric returns false for NaN" time="0.001">
    </testcase>
    <testcase classname="isNumeric returns false for numeric strings" name="isNumeric returns false for numeric strings" time="0.001">
    </testcase>
    <testcase classname="isNumeric returns false for null" name="isNumeric returns false for null" time="0.002">
    </testcase>
    <testcase classname="isNumeric returns false for undefined" name="isNumeric returns false for undefined" time="0.001">
    </testcase>
    <testcase classname="isNumeric returns false for whitespace strings" name="isNumeric returns false for whitespace strings" time="0.002">
    </testcase>
    <testcase classname="isNumeric returns false for Infinity" name="isNumeric returns false for Infinity" time="0.001">
    </testcase>
    <testcase classname="isNumeric returns false for functions" name="isNumeric returns false for functions" time="0.001">
    </testcase>
    <testcase classname="isNumeric returns false for json objects" name="isNumeric returns false for json objects" time="0">
    </testcase>
    <testcase classname="isNumeric returns false for arrays" name="isNumeric returns false for arrays" time="0.002">
    </testcase>
    <testcase classname="isNumeric returns false for class definitions and instances" name="isNumeric returns false for class definitions and instances" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:01" time="0.306" tests="6">
    <testcase classname="list .orderBy() returns a new OrderedList" name="list .orderBy() returns a new OrderedList" time="0.004">
    </testcase>
    <testcase classname="list .orderBy() sorts the underlying array in ascending order" name="list .orderBy() sorts the underlying array in ascending order" time="0.002">
    </testcase>
    <testcase classname="list .orderBy() doesn&apos;t modify the order of the source array" name="list .orderBy() doesn&apos;t modify the order of the source array" time="0.002">
    </testcase>
    <testcase classname="list .orderBy() handles an empty array" name="list .orderBy() handles an empty array" time="0.002">
    </testcase>
    <testcase classname="list .orderBy() places nulls before numbers" name="list .orderBy() places nulls before numbers" time="0.002">
    </testcase>
    <testcase classname="list .orderBy() places nulls before strings" name="list .orderBy() places nulls before strings" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:01" time="0.252" tests="3">
    <testcase classname="list .thenByDescending() creates and returns a new jinq instance" name="list .thenByDescending() creates and returns a new jinq instance" time="0.003">
    </testcase>
    <testcase classname="list .thenByDescending() sorts by an additional field in descending order when invoked after .orderBy()" name="list .thenByDescending() sorts by an additional field in descending order when invoked after .orderBy()" time="0.002">
    </testcase>
    <testcase classname="list .thenByDescending() places null values after strings" name="list .thenByDescending() places null values after strings" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:00" time="1.614" tests="10">
    <testcase classname="list .average() returns average of underlying array of numbers" name="list .average() returns average of underlying array of numbers" time="0.004">
    </testcase>
    <testcase classname="list .average() returns average from a list of objects using a selector" name="list .average() returns average from a list of objects using a selector" time="0.011">
    </testcase>
    <testcase classname="list .average() returns the average from a list comprised of numbers and nulls, ignoring the nulls" name="list .average() returns the average from a list comprised of numbers and nulls, ignoring the nulls" time="0.001">
    </testcase>
    <testcase classname="list .average() returns null for an empty list" name="list .average() returns null for an empty list" time="0.003">
    </testcase>
    <testcase classname="list .average() returns null for sequence of null values" name="list .average() returns null for sequence of null values" time="0.001">
    </testcase>
    <testcase classname="list .average() yields same result whether chained with .select() or using selector argument" name="list .average() yields same result whether chained with .select() or using selector argument" time="0.001">
    </testcase>
    <testcase classname="list .average() chains with .where()" name="list .average() chains with .where()" time="0.001">
    </testcase>
    <testcase classname="list .average() chains with .orderBy() and .thenBy()" name="list .average() chains with .orderBy() and .thenBy()" time="0.002">
    </testcase>
    <testcase classname="list .average() returns average from a list of positive and negative numbers" name="list .average() returns average from a list of positive and negative numbers" time="0.001">
    </testcase>
    <testcase classname="list .average() throws an error when non numeric, non null values appear in the source sequence" name="list .average() throws an error when non numeric, non null values appear in the source sequence" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="1" skipped="0" timestamp="2025-05-28T05:30:57" time="4.861" tests="8">
    <testcase classname="List .max() returns max of underlying array of numbers" name="List .max() returns max of underlying array of numbers" time="0.041">
    </testcase>
    <testcase classname="List .max() returns max of underlying array of strings" name="List .max() returns max of underlying array of strings" time="0.001">
      <failure>Error: type not supported.
    at ifThrow (c:\Dev\jinq\dist\index.js:3:24)
    at checkedNumber (c:\Dev\jinq\dist\index.js:73:5)
    at c:\Dev\jinq\dist\index.js:143:23
    at Array.forEach (&lt;anonymous&gt;)
    at _List.max (c:\Dev\jinq\dist\index.js:141:17)
    at Object.&lt;anonymous&gt; (C:\Dev\jinq\__tests__\list\max.spec.ts:13:27)
    at Promise.then.completed (C:\Dev\jinq\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Dev\jinq\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Dev\jinq\node_modules\jest-circus\build\run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (C:\Dev\jinq\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Dev\jinq\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Dev\jinq\node_modules\jest-circus\build\run.js:121:9)
    at _runTestsForDescribeBlock (C:\Dev\jinq\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Dev\jinq\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Dev\jinq\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Dev\jinq\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Dev\jinq\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Dev\jinq\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Dev\jinq\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="List .max() returns max from a list of objects using a selector" name="List .max() returns max from a list of objects using a selector" time="0.002">
    </testcase>
    <testcase classname="List .max() returns null for an empty list" name="List .max() returns null for an empty list" time="0.001">
    </testcase>
    <testcase classname="List .max() yields same result whether chained with .select() or using selector argument" name="List .max() yields same result whether chained with .select() or using selector argument" time="0.001">
    </testcase>
    <testcase classname="List .max() chains with .where()" name="List .max() chains with .where()" time="0.001">
    </testcase>
    <testcase classname="List .max() chains with .orderBy() and .thenBy()" name="List .max() chains with .orderBy() and .thenBy()" time="0.008">
    </testcase>
    <testcase classname="List .max() throws an error when non numeric, non null values appear in the source sequence" name="List .max() throws an error when non numeric, non null values appear in the source sequence" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.263" tests="6">
    <testcase classname="List .select() throws an error when invoked without a parameter" name="List .select() throws an error when invoked without a parameter" time="0.005">
    </testcase>
    <testcase classname="List .select() throws an error when invoked with a null parameter" name="List .select() throws an error when invoked with a null parameter" time="0.003">
    </testcase>
    <testcase classname="List .select() throws an error when invoked with an undefined parameter" name="List .select() throws an error when invoked with an undefined parameter" time="0.008">
    </testcase>
    <testcase classname="List .select() returns a projection of the original sequence" name="List .select() returns a projection of the original sequence" time="0.009">
    </testcase>
    <testcase classname="List .select() returns a sequence of strings from a list of objects" name="List .select() returns a sequence of strings from a list of objects" time="0.002">
    </testcase>
    <testcase classname="List .select() returns a sequence of numbers from a list of objects" name="List .select() returns a sequence of numbers from a list of objects" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.326" tests="9">
    <testcase classname="List .count() returns length of underlying array with default invocation" name="List .count() returns length of underlying array with default invocation" time="0.006">
    </testcase>
    <testcase classname="List .count() returns 0 for an empty list" name="List .count() returns 0 for an empty list" time="0.004">
    </testcase>
    <testcase classname="List .count() matches the equivalent .where() chain with predicate invocation" name="List .count() matches the equivalent .where() chain with predicate invocation" time="0.003">
    </testcase>
    <testcase classname="List .count() accepts a predicate which filters an underlying array of numbers" name="List .count() accepts a predicate which filters an underlying array of numbers" time="0.001">
    </testcase>
    <testcase classname="List .count() accepts a predicate which filters an underlying array of json objects" name="List .count() accepts a predicate which filters an underlying array of json objects" time="0.002">
    </testcase>
    <testcase classname="List .count() returns zero when jinq contains no matching items" name="List .count() returns zero when jinq contains no matching items" time="0.004">
    </testcase>
    <testcase classname="List .count() returns length of the underlying array with a forced truthy predicate" name="List .count() returns length of the underlying array with a forced truthy predicate" time="0.002">
    </testcase>
    <testcase classname="List .count() returns zero with a forced falsey predicate" name="List .count() returns zero with a forced falsey predicate" time="0.003">
    </testcase>
    <testcase classname="List .count() chains with .select() statement" name="List .count() chains with .select() statement" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="list" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.282" tests="2">
    <testcase classname="list .append() throws on null item" name="list .append() throws on null item" time="0.014">
    </testcase>
    <testcase classname="list .append() adds an item to the end of the source sequence" name="list .append() adds an item to the end of the source sequence" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="orderedList" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.267" tests="3">
    <testcase classname="orderedList .toDictionary() throws an exception if lambdaKey is not specified" name="orderedList .toDictionary() throws an exception if lambdaKey is not specified" time="0.006">
    </testcase>
    <testcase classname="orderedList .toDictionary() throws an exception if lambdaValue is not specified" name="orderedList .toDictionary() throws an exception if lambdaValue is not specified" time="0.009">
    </testcase>
    <testcase classname="orderedList .toDictionary() throws an exception if a duplicate key is detected" name="orderedList .toDictionary() throws an exception if a duplicate key is detected" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="orderedList" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.249" tests="1">
    <testcase classname="orderedList constructor throws an error if constructed without a comparator" name="orderedList constructor throws an error if constructed without a comparator" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.241" tests="2">
    <testcase classname="List .sum() returns sum of underlying array of numbers" name="List .sum() returns sum of underlying array of numbers" time="0.003">
    </testcase>
    <testcase classname="List .sum() returns undefined for an empty list" name="List .sum() returns undefined for an empty list" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="dictionary" errors="0" failures="0" skipped="0" timestamp="2025-05-28T05:31:02" time="0.223" tests="1">
    <testcase classname="dictionary get() throws an error if a key does not exist" name="dictionary get() throws an error if a key does not exist" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="1" skipped="0" timestamp="2025-05-28T05:31:01" time="1.465" tests="9">
    <testcase classname="List .min() returns min of underlying array of numbers" name="List .min() returns min of underlying array of numbers" time="0.006">
    </testcase>
    <testcase classname="List .min() returns max of underlying array of strings" name="List .min() returns max of underlying array of strings" time="0.002">
      <failure>Error: type not supported.
    at ifThrow (c:\Dev\jinq\dist\index.js:3:24)
    at checkedNumber (c:\Dev\jinq\dist\index.js:73:5)
    at c:\Dev\jinq\dist\index.js:128:23
    at Array.forEach (&lt;anonymous&gt;)
    at _List.min (c:\Dev\jinq\dist\index.js:126:17)
    at Object.&lt;anonymous&gt; (C:\Dev\jinq\__tests__\list\min.spec.ts:13:27)
    at Promise.then.completed (C:\Dev\jinq\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Dev\jinq\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Dev\jinq\node_modules\jest-circus\build\run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
    at _runTest (C:\Dev\jinq\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Dev\jinq\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Dev\jinq\node_modules\jest-circus\build\run.js:121:9)
    at _runTestsForDescribeBlock (C:\Dev\jinq\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Dev\jinq\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Dev\jinq\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Dev\jinq\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Dev\jinq\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Dev\jinq\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Dev\jinq\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="List .min() returns min from a list of objects using a selector" name="List .min() returns min from a list of objects using a selector" time="0.001">
    </testcase>
    <testcase classname="List .min() returns null for an empty list" name="List .min() returns null for an empty list" time="0.001">
    </testcase>
    <testcase classname="List .min() ignores nulls and returns the min of remaining values" name="List .min() ignores nulls and returns the min of remaining values" time="0.001">
    </testcase>
    <testcase classname="List .min() yields same result whether chained with .select() or using selector argument" name="List .min() yields same result whether chained with .select() or using selector argument" time="0.001">
    </testcase>
    <testcase classname="List .min() chains with .where()" name="List .min() chains with .where()" time="0.001">
    </testcase>
    <testcase classname="List .min() chains with .orderBy() and .thenBy()" name="List .min() chains with .orderBy() and .thenBy()" time="0.001">
    </testcase>
    <testcase classname="List .min() throws an error when non numeric, non null values appear in the source sequence" name="List .min() throws an error when non numeric, non null values appear in the source sequence" time="0.002">
    </testcase>
  </testsuite>
</testsuites>